name: MacOS build

on:   
  push:
    branches: [master]
  pull_request:
  workflow_dispatch:

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Release

jobs:
  build:
    # The CMake configure and build commands are platform agnostic and should work equally
    # well on Windows or Mac.  You can convert this to a matrix build if you need
    # cross-platform coverage.
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
    runs-on: macos-latest

    steps:
    - name: Checkout Drogon source code
      uses: actions/checkout@v2
      with:
        submodules: true
        fetch-depth: 0
      
    - name: (macOS) Install dependencies
      run: |
        brew install jsoncpp ossp-uuid brotli zlib
        brew install openssl lz4 mariadb mysql sqlite3 postgresql
    - name: install gtest
      run: |
        wget https://github.com/google/googletest/archive/release-1.10.0.tar.gz
        tar xf release-1.10.0.tar.gz
        cd googletest-release-1.10.0
        cmake .
        make
        sudo make install
  
    - name: Create Build Environment & Configure Cmake
      # Some projects don't allow in-source building, so create a separate build directory
      # We'll use this as our working directory for all subsequent commands
      shell: bash
      working-directory: ${{env.GITHUB_WORKSPACE}}
      run: |
        mkdir build
        cd build
        cmake .. -DCMAKE_BUILD_TYPE=$BUILD_TYPE -DBUILD_TESTING=on

    - name: Build
      working-directory: ${{env.GITHUB_WORKSPACE}}
      shell: bash
      # Execute the build.  You can specify a specific target with "--target <NAME>"
      run: |
        cd build
        sudo make && sudo make install
    - name: Prepare for testing (macOS)
      run: |
        brew tap homebrew/services;
        brew services restart postgresql;
        brew services start mysql;
        sleep 4;
        mysql -e "SET PASSWORD FOR 'root'@'localhost' = PASSWORD('')";
        mysql -e "GRANT ALL PRIVILEGES ON *.* TO 'root'@'localhost'";
        mysql -e "FLUSH PRIVILEGES";
        brew services restart mysql;
        sleep 4;
        psql -c 'create user postgres superuser;' postgres;
    - name: Create Build Environment
      # Some projects don't allow in-source building, so create a separate build directory
      # We'll use this as our working directory for all subsequent commands
      run: cmake -E make_directory ${{github.workspace}}/build

    - name: Configure CMake
      # Use a bash shell so we can use the same syntax for environment variable
      # access regardless of the host operating system
      shell: bash
      working-directory: ${{github.workspace}}/build
      # Note the current convention is to use the -S and -B options here to specify source 
      # and build directories, but this is only available with CMake 3.13 and higher.  
      # The CMake binaries on the Github Actions machines are (as of this writing) 3.12
      run: cmake $GITHUB_WORKSPACE -DCMAKE_BUILD_TYPE=$BUILD_TYPE

    - name: Build
      working-directory: ${{github.workspace}}/build
      shell: bash
      # Execute the build.  You can specify a specific target with "--target <NAME>"
      run: cmake --build . --config $BUILD_TYPE

    - name: Test
      working-directory: ${{github.workspace}}/build
      shell: bash
      # Execute tests defined by the CMake configuration.  
      # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
      run: ctest -C $BUILD_TYPE
