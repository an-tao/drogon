<%inc#include "create_model.h"
using namespace drogon_ctl;
%>
/**
 *
 *  [[className]].h
 *  DO NOT EDIT. This file is generated by drogon_ctl
 *
 */

#pragma once
#include <drogon/orm/Result.h>
#include <drogon/orm/Row.h>
#include <drogon/orm/Field.h>
#include <drogon/orm/SqlBinder.h>
#include <drogon/orm/Mapper.h>
#include <trantor/utils/Date.h>
#include <json/json.h>
#include <string>
#include <memory>
#include <vector>
#include <tuple>
#include <stdint.h>
#include <iostream>

using namespace drogon::orm;

namespace drogon_model
{
namespace [[dbName]] 
{
<%c++
auto &schema=@@.get<std::string>("schema");
if(!schema.empty())
{
    $$<<"namespace "<<schema<<"\n";
    $$<<"{\n";
}
%>
class [[className]]
{
  public:
    struct Cols
    {
<%c++
auto cols=@@.get<std::vector<ColumnInfo>>("columns");
    for(size_t i=0;i<cols.size();i++)
    {
        $$<<"        static const std::string _"<<cols[i]._colName<<";\n";
    }
%>
    };

    const static int primaryKeyNumber;
    const static std::string tableName;
    const static bool hasPrimaryKey;
<%c++if(@@.get<int>("hasPrimaryKey")<=1){%>
    const static std::string primaryKeyName;
<%c++if(!@@.get<std::string>("primaryKeyType").empty()){%>
    typedef [[primaryKeyType]] PrimaryKeyType;
    const PrimaryKeyType &getPrimaryKey() const;
<%c++}else{%>
    typedef void PrimaryKeyType;
<%c++}%>
<%c++}else{
    auto pkTypes=@@.get<std::vector<std::string>>("primaryKeyType");   
    std::string typelist;
    for(size_t i=0;i<pkTypes.size();i++)
    {
        typelist += pkTypes[i];
        if(i<(pkTypes.size()-1))
            typelist += ",";
    }
%>
    const static std::vector<std::string> primaryKeyName;
    typedef std::tuple<{%typelist%}> PrimaryKeyType;//<%c++
    auto pkName=@@.get<std::vector<std::string>>("primaryKeyName");
    for(size_t i=0;i<pkName.size();i++)
    {
        $$<<pkName[i];
        if(i<(pkName.size()-1))
            $$<<",";
    }
%>

    PrimaryKeyType getPrimaryKey() const; 
<%c++}%>

    /**
     * @brief constructor
     * @param r One row of records in the SQL query result.
     * @param indexOffset Set the offset to -1 to access all columns by column names, 
     * otherwise access all columns by offsets.
     * @note If the SQL is not a style of 'select * from table_name ...' (select all 
     * columns by an asterisk), please set the offset to -1.
     */
    explicit [[className]](const Row &r, const ssize_t indexOffset = 0) noexcept;

    /**
     * @brief constructor
     * @param pJson The json object to construct a new instance.
     */
    explicit [[className]](const Json::Value &pJson) noexcept(false);

    /**
     * @brief constructor
     * @param pJson The json object to construct a new instance.
     * @param pMasqueradingVector The aliases of table columns.
     */
     [[className]](const Json::Value &pJson, const std::vector<std::string> &pMasqueradingVector) noexcept(false);

    [[className]]() = default;
    
    void updateByJson(const Json::Value &pJson) noexcept(false);
    void updateByMasqueradedJson(const Json::Value &pJson,
                                 const std::vector<std::string> &pMasqueradingVector) noexcept(false);
<%c++
    for(const auto &col:cols)
    {
        $$<<"    /**  For column "<<col._colName<<"  */\n";
        if(!col._colType.empty())
        {
            $$<<"    ///Get the value of the column "<<col._colName<<", returns the default value if the column is null\n";
            $$<<"    const "<<col._colType<<" &getValueOf"<<col._colTypeName<<"() const noexcept;\n";
            if(col._colType=="std::vector<char>")
            {
                $$<<"    ///Return the column value by std::string with binary data\n";
                $$<<"    std::string getValueOf"<<col._colTypeName<<"AsString() const noexcept;\n";
            }
            $$<<"    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null\n";
            $$<<"    const std::shared_ptr<"<<col._colType<<"> &get"<<col._colTypeName<<"() const noexcept;\n";
            if(!col._isAutoVal)
            {
            $$<<"    ///Set the value of the column "<<col._colName<<"\n";
            $$<<"    void set"<<col._colTypeName<<"(const "<<col._colType<<" &p"<<col._colTypeName<<") noexcept;\n";
                if(col._colType=="std::string")
                    $$<<"    void set"<<col._colTypeName<<"("<<col._colType<<" &&p"<<col._colTypeName<<") noexcept;\n";
                if(col._colType=="std::vector<char>")
                {
                    $$<<"    void set"<<col._colTypeName<<"(const std::string &p"<<col._colTypeName<<") noexcept;\n";
                }
            }
        }
        else
            $$<<"    //FIXME!!"<<" getValueOf"<<col._colTypeName<<"() const noexcept;\n";
        $$<<"\n";    
    }
%>

    static size_t getColumnNumber() noexcept {  return {% cols.size() %};  }
    static const std::string &getColumnName(size_t index) noexcept(false);

    Json::Value toJson() const;
    Json::Value toMasqueradedJson(const std::vector<std::string> &pMasqueradingVector) const;

  private:
    friend Mapper<[[className]]>;
    static const std::vector<std::string> &insertColumns() noexcept;
    void outputArgs(drogon::orm::internal::SqlBinder &binder) const;
    const std::vector<std::string> updateColumns() const;
    void updateArgs(drogon::orm::internal::SqlBinder &binder) const;
    ///For mysql or sqlite3
    void updateId(const uint64_t id);
<%c++
    for(auto col:cols)
    {
        if(!col._colType.empty())
            $$<<"    std::shared_ptr<"<<col._colType<<"> _"<<col._colValName<<";\n";
    }
    %>
    struct MetaData
    {
        const std::string _colName;
        const std::string _colType;
        const std::string _colDatabaseType;
        const ssize_t _colLength;
        const bool _isAutoVal;
        const bool _isPrimaryKey;
        const bool _notNull;
    };
    static const std::vector<MetaData> _metaData;
    bool _dirtyFlag[{%cols.size()%}]={ false };

  public:
    static const std::string &sqlForFindingByPrimaryKey()
    {
<%c++
auto rdbms=@@.get<std::string>("rdbms");
if(@@.get<int>("hasPrimaryKey")<=1){
        if(!@@.get<std::string>("primaryKeyType").empty()){%>
        static std::string sql="select * from " + tableName + " where [[primaryKeyName]] = {%(rdbms=="postgresql"?"$1":"?")%}";
<%c++}else{%>
        static std::string sql="";
<%c++}%>
<%c++}else{
        auto pkName=@@.get<std::vector<std::string>>("primaryKeyName");
%>
        static std::string sql="select * from " + tableName + " where <%c++
        for(size_t i=0;i<pkName.size();i++)
        {
            if(rdbms=="postgresql")
            {
                $$<<pkName[i]<<" = $"<<i+1;
            }
            else
            {
                $$<<pkName[i]<<" = ?";
            }
            if(i<(pkName.size()-1))
                $$<<" and ";
        }
        $$<<"\";\n";
    }
%>
        return sql;                   
    }

    static const std::string &sqlForDeletingByPrimaryKey()
    {
<%c++
if(@@.get<int>("hasPrimaryKey")<=1){
        if(!@@.get<std::string>("primaryKeyType").empty()){%>
        static std::string sql="delete from " + tableName + " where [[primaryKeyName]] = {%(rdbms=="postgresql"?"$1":"?")%}";
<%c++}else{%>
        static std::string sql="";
<%c++}%>
<%c++}else{
        auto pkName=@@.get<std::vector<std::string>>("primaryKeyName");
%>
        static std::string sql="delete from " + tableName + " where <%c++
        for(size_t i=0;i<pkName.size();i++)
        {
            if(rdbms=="postgresql")
            {
                $$<<pkName[i]<<" = $"<<i+1;
            }
            else
            {
                $$<<pkName[i]<<" = ?";
            }
            if(i<(pkName.size()-1))
                $$<<" and ";
        }
        $$<<"\";\n";
    }
%>
        return sql;                   
    }

    static const std::string &sqlForInserting()
    {
        static std::string sql="insert into " + tableName + " (<%c++
        for(size_t i=0;i<cols.size();i++)
        {
            if(cols[i]._isAutoVal || cols[i]._colType.empty())
                continue;
            if(i<cols.size()-1)
                $$<<cols[i]._colName<<",";
            else
                $$<<cols[i]._colName;
        }
        $$<<") values (";
        auto counter = 0;
        for(size_t i=0;i<cols.size();i++)
        {
            if(cols[i]._isAutoVal || cols[i]._colType.empty())
                continue;
            if(rdbms=="postgresql")
            {
                counter++;
                $$<<"$"<<counter;
            }
            else
            {
                $$<<"?";
            }
            if(i<cols.size()-1)
            {
                $$<<",";
            }
        }
        $$<<")";
        if(rdbms=="postgresql")
        {
            $$<<" returning *\";\n";
        }
        else
        {
            $$<<"\";\n";
        }
%>
        return sql;   
    }
};
<%c++
if(!schema.empty())
{
    $$<<"} // namespace "<<schema<<"\n";
}
%>
} // namespace [[dbName]]
} // namespace drogon_model
