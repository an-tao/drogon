//this file is generated by program(drogon_ctl) automatically,don't modify it!
#include "gitignore.h"
#include <drogon/utils/OStringStream.h>
#include <string>
#include <map>
#include <vector>
#include <set>
#include <iostream>
#include <unordered_map>
#include <unordered_set>
#include <algorithm>
#include <list>
#include <deque>
#include <queue>
using namespace drogon;
std::string gitignore::genText(const DrTemplateData& gitignore_view_data)
{
	drogon::OStringStream gitignore_tmp_stream;
	std::string layoutName{""};
	gitignore_tmp_stream << "# Prerequisites\n";
	gitignore_tmp_stream << "*.d\n";
gitignore_tmp_stream<<"\n";
	gitignore_tmp_stream << "# Compiled Object files\n";
	gitignore_tmp_stream << "*.slo\n";
	gitignore_tmp_stream << "*.lo\n";
	gitignore_tmp_stream << "*.o\n";
	gitignore_tmp_stream << "*.obj\n";
gitignore_tmp_stream<<"\n";
	gitignore_tmp_stream << "# Precompiled Headers\n";
	gitignore_tmp_stream << "*.gch\n";
	gitignore_tmp_stream << "*.pch\n";
gitignore_tmp_stream<<"\n";
	gitignore_tmp_stream << "# Compiled Dynamic libraries\n";
	gitignore_tmp_stream << "*.so\n";
	gitignore_tmp_stream << "*.dylib\n";
	gitignore_tmp_stream << "*.dll\n";
gitignore_tmp_stream<<"\n";
	gitignore_tmp_stream << "# Fortran module files\n";
	gitignore_tmp_stream << "*.mod\n";
	gitignore_tmp_stream << "*.smod\n";
gitignore_tmp_stream<<"\n";
	gitignore_tmp_stream << "# Compiled Static libraries\n";
	gitignore_tmp_stream << "*.lai\n";
	gitignore_tmp_stream << "*.la\n";
	gitignore_tmp_stream << "*.a\n";
	gitignore_tmp_stream << "*.lib\n";
gitignore_tmp_stream<<"\n";
	gitignore_tmp_stream << "# Executables\n";
	gitignore_tmp_stream << "*.exe\n";
	gitignore_tmp_stream << "*.out\n";
	gitignore_tmp_stream << "*.app\n";
gitignore_tmp_stream<<"\n";
	gitignore_tmp_stream << "build\n";
	gitignore_tmp_stream << "cmake-build-debug\n";
	gitignore_tmp_stream << ".idea\n";
if(layoutName.empty())
{
std::string ret{std::move(gitignore_tmp_stream.str())};
return ret;
}else
{
auto templ = DrTemplateBase::newTemplate(layoutName);
if(!templ) return "";
HttpViewData data = gitignore_view_data;
auto str = std::move(gitignore_tmp_stream.str());
if(!str.empty() && str[str.length()-1] == '\n') str.resize(str.length()-1);
data[""] = std::move(str);
return templ->genText(data);
}
}
